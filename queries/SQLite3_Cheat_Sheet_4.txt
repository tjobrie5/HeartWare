-- CREATE DATABASE

sqlite3 studentdb.db

-- There are no ENUMs in SQLite, so we need a separate table for sex

CREATE TABLE sex_type(
sex_id TEXT PRIMARY KEY NOT NULL,
sex_type INTEGER);

-- Fill the sex_type table

INSERT INTO sex_type(sex_id, sex_type) VALUES ('M',1);
INSERT INTO sex_type(sex_id, sex_type) VALUES ('F',2);

--------

CREATE TABLE student(
name VARCHAR(23) NOT NULL, -- VARCHAR is treated as TEXT and 23 is ignored
sex CHARACTER(1) NOT NULL, -- CHARACTER and the length restriction is ignored
id_number INTEGER PRIMARY KEY AUTOINCREMENT, 
foreign key(sex) references sex_type(sex_id));

--------

-- Creating an ENUM that represents the type of test (Quiz or Test)

CREATE TABLE test_type(
test_id TEXT PRIMARY KEY NOT NULL,
test_type INTEGER);

-- Fill the test_type table

INSERT INTO test_type(test_id, test_type) VALUES ('Q',1);
INSERT INTO test_type(test_id, test_type) VALUES ('T',2);

--------

CREATE TABLE test(
  date     DATE NOT NULL, -- DATE is seen as a NUMERIC type
  type_test TEXT NOT NULL,
  test_id INTEGER PRIMARY KEY AUTOINCREMENT,
  FOREIGN KEY (type_test) REFERENCES test_type (test_id));


CREATE TABLE test_score(
student_id INTEGER NOT NULL,
test_id INTEGER NOT NULL,
score INTEGER NOT NULL,
FOREIGN KEY (test_id) REFERENCES test (test_id),
FOREIGN KEY (student_id) REFERENCES student (id_number),
PRIMARY KEY (test_id, student_id)); -- A Composite Primary Key

--------

CREATE TABLE absence(
  student_id INTEGER NOT NULL,
  date       DATE NOT NULL,
  PRIMARY KEY (student_id, date),
  FOREIGN KEY (student_id) REFERENCES student (id_number));
  
-------

INSERT VALUES

INSERT INTO student (name, sex) VALUES ('Sally','F');
INSERT INTO student (name, sex) VALUES ('Mark','M');
INSERT INTO student (name, sex) VALUES ('Paul','M');
INSERT INTO student (name, sex) VALUES ('Peter','M');
INSERT INTO student (name, sex) VALUES ('Michael','M');
INSERT INTO student (name, sex) VALUES ('Thomas','M');
INSERT INTO student (name, sex) VALUES ('Rebecca','F');
INSERT INTO student (name, sex) VALUES ('Willow','F');
INSERT INTO student (name, sex) VALUES ('Sarah','F');
INSERT INTO student (name, sex) VALUES ('Emily','F');


-- date, type_test, test_id

INSERT INTO test VALUES (date('now'),'Q',1); -- New Test: NULL for Autoincrement

-- student_id, test_id, score

INSERT INTO test_score VALUES (1,1,24);
INSERT INTO test_score VALUES (2,1,22);
INSERT INTO test_score VALUES (3,1,-1);
INSERT INTO test_score VALUES (4,1,19);
INSERT INTO test_score VALUES (5,1,25);
INSERT INTO test_score VALUES (6,1,22);
INSERT INTO test_score VALUES (7,1,18);
INSERT INTO test_score VALUES (8,1,16);
INSERT INTO test_score VALUES (9,1,20);
INSERT INTO test_score VALUES (10,1,19);

-- student_id, date

INSERT INTO absence VALUES (3,date('now')); -- One student was absent

------- NEW TEST

-- date, type_test, test_id

INSERT INTO test VALUES ('2013-06-10','T',2); -- Put quotes around date

-- student_id, test_id, score

INSERT INTO test_score VALUES (1,2,48);
INSERT INTO test_score VALUES (2,2,44);
INSERT INTO test_score VALUES (3,2,42);
INSERT INTO test_score VALUES (4,2,-1);
INSERT INTO test_score VALUES (5,2,40);
INSERT INTO test_score VALUES (6,2,45);
INSERT INTO test_score VALUES (7,2,50);
INSERT INTO test_score VALUES (8,2,39);
INSERT INTO test_score VALUES (9,2,-1);
INSERT INTO test_score VALUES (10,2,-1);

-- student_id, date

INSERT INTO absence VALUES (4,'2013-06-10'); 
INSERT INTO absence VALUES (9,'2013-06-10'); 
INSERT INTO absence VALUES (10,'2013-06-10'); 

-- SELECT QUERIES

-- Show test results for all students for the quiz given on 2013-06-08
-- We need to pull this information from 2 tables this time

SELECT student_id, score, type_test, date
FROM test, test_score
WHERE date = '2013-06-08'
AND test.test_id = test_score.test_id;

-- Print out the students name with the scores
-- You have to match the student ids for tables test_score and student
-- That way they will only show the test score that corresponds with each
-- individual student

SELECT name, score, type_test, date
FROM test, test_score, student
WHERE date = '2013-06-08'
AND test.test_id = test_score.test_id
AND test_score.student_id = student.id_number;

-- List all students along with their number of absences
-- Since we are using an aggregate query here to group data we have to define 
-- how we want the information to be grouped when it is displayed on the screen. 
-- That is why we define id_number as the way to group information. It is saying 
-- that we should calculate the number of absences for each id_number.

SELECT name AS NAME, 
COUNT(absence.date) AS ABSENCES
FROM student, absence
WHERE absence.student_id = student.id_number
GROUP BY id_number;

-- SQLite JOINS

-- Above we defined INNER JOINs by separating tables with a comma. You can also
-- define them with the word INNER JOIN

-- An INNER JOIN is the most common join. An INNER JOIN returns only those 
-- records from tables that match. The JOIN CONDITION defines the results.

SELECT name, score, test_id
FROM test_score JOIN student
ON student_id = id_number;



-- To show all students with the number of ansences even if they have none we
-- have to use a LEFT JOIN. 

-- The LEFT JOIN says that we need a row for each piece of data listed on the 
-- left of the join. Don't forget to change WHERE into ON

SELECT name AS NAME, 
COUNT(absence.date) AS ABSENCES
FROM student LEFT JOIN absence
ON absence.student_id = student.id_number
GROUP BY id_number;



-- A NATURAL INNER JOIN is similar to a LEFT JOIN in that it returns all columns
-- that match in both tables.

SELECT score, test_id 
FROM student NATURAL JOIN test_score
WHERE student_id = id_number;



-- A CROSS INNER JOIN (Cartesian Join) combines all the records from 2 tables. 
-- This can sometimes make a mess and should normally be avoided

SELECT score, test_id  
FROM student CROSS JOIN test_score;



-- Applying Functions in SQLite

-- Find the Best and Worst Scores on all quizes and tests

-- test_score : student_id, test_id, score
-- test : date, type_test, test_id
-- student : name, sex, id_number

SELECT test.date AS DATE,
MIN(test_score.score) AS WORST,
MAX(test_score.score) AS BEST
FROM test_score, test
WHERE test_score.test_id = test.test_id
GROUP BY test.date;

-- Print the average score on each test

SELECT test.date AS DATE,
AVG(test_score.score) 'AVG SCORE'
FROM test_score, test
WHERE test_score.test_id = test.test_id
GROUP BY test.date;

-- List all students that had a test score over 40

SELECT name, test_score.score 
FROM test_score, student
WHERE test_score.score > 40 AND test_score.student_id = student.id_number
GROUP BY name;

SELECT COUNT(name) AS 'SCORED OVER 40'
FROM student
WHERE student.name in
(SELECT name 
FROM test_score, student
WHERE test_score.score > 40 AND test_score.student_id = student.id_number
GROUP BY name);

-- VIEWS IN SQLite --

-- A view is used to store a queries result. It is not part of the schema

CREATE VIEW ScoreOver40 AS 
SELECT name, test_score.score
FROM test_score, student
WHERE test_score.score > 40 
AND test_score.student_id = student.id_number
GROUP BY name;

drop view ScoreOver40; -- Delete the view

-- TRIGGERS in SQLite --

-- Triggers are operations that are automatically performed when a specific 
-- event occurs

-- test : date, type_test, test_id
-- test_score : student_id, test_id, score
-- student : name, sex, id_number

-- Will Hold Data When a Student Has a Makeup Test

CREATE TABLE Log(
id INTEGER PRIMARY KEY,
test_id INTEGER NOT NULL, 
date     DATE NOT NULL,
student_id INTEGER NOT NULL,
FOREIGN KEY (test_id) REFERENCES test_score (test_id),
FOREIGN KEY (student_id) REFERENCES test_score (student_id));

-- The Trigger that updates the Log when test_score is updated

CREATE TRIGGER test_score_update
AFTER UPDATE OF score ON test_score
BEGIN
INSERT INTO Log(test_id, date, student_id)
VALUES(new.test_id, date('now'), new.student_id); 
-- Don't reference table instead use new
END;

select * from absence; -- Show all absences

UPDATE test_score 
SET score=20
WHERE test_id=2 AND student_id=9;
